package com.example.sql_server;

import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import java.sql.*;
import java.util.Optional;

/**
 * Referred from https://www.ibm.com/developerworks/library/j-loggable/index.html
 *
 * <p>
 *
 * <p>Wrapper for PreparedStatement. Used to print queries to customer logs
 */
public class LoggablePreparedStatement extends Queryable implements PreparedStatement {
    private final PreparedStatement wrappedStatement;
    final String initialSql;

    protected Optional<String> wrappedStatement() {
        return Optional.of(wrappedStatement.toString());
    }

    LoggablePreparedStatement(PreparedStatement statement, String sql) {
        this(statement, sql, LoggableConfig.defaultConfig());
    }

    public LoggablePreparedStatement(PreparedStatement statement, String sql, LoggableConfig config) {
        super(config);
        this.wrappedStatement = statement;
        this.initialSql = sql;
    }

    @Override
    public void addBatch() throws SQLException {
        addQueryToBatch(initialSql);
        wrappedStatement.addBatch();
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        addQueryToBatch(sql);
        wrappedStatement.addBatch(sql);
    }

    @Override
    public void cancel() throws SQLException {
        wrappedStatement.cancel();
    }

    @Override
    public void clearBatch() throws SQLException {
        clearBatchedQueries();
        wrappedStatement.clearBatch();
    }

    @Override
    public void clearParameters() throws SQLException {
        wrappedStatement.clearParameters();
    }

    @Override
    public void clearWarnings() throws SQLException {
        wrappedStatement.clearWarnings();
    }

    @Override
    public void close() throws SQLException {
        if (config.closeResourcesQuietly) {
            Queryable.closeQuietly(wrappedStatement);
        } else {
            wrappedStatement.close();
        }
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        wrappedStatement.closeOnCompletion();
    }

    @Override
    public boolean execute() throws SQLException {
        logQuery(initialSql);
        return timeQuery(wrappedStatement::execute);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        logQuery(sql);
        return timeQuery(() -> wrappedStatement.execute(sql));
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        logQuery(sql);
        return timeQuery(() -> wrappedStatement.execute(sql, autoGeneratedKeys));
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        logQuery(sql);
        return timeQuery(() -> wrappedStatement.execute(sql, columnIndexes));
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        logQuery(sql);
        return timeQuery(() -> wrappedStatement.execute(sql, columnNames));
    }

    @Override
    public int[] executeBatch() throws SQLException {
        logBatchedQueries();
        return timeQuery(wrappedStatement::executeBatch);
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        logQuery(initialSql);
        ResultSet rs = timeQuery(() -> wrappedStatement.executeQuery());
        return new LoggableResultSet(rs, config, queryNumber);
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        logQuery(sql);
        ResultSet rs = timeQuery(() -> wrappedStatement.executeQuery(sql));
        return new LoggableResultSet(rs, config, queryNumber);
    }

    @Override
    public int executeUpdate() throws SQLException {
        logQuery(initialSql);
        return timeQuery(wrappedStatement::executeUpdate);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        logQuery(sql);
        return timeQuery(() -> wrappedStatement.executeUpdate(sql));
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        logQuery(sql);
        return timeQuery(() -> wrappedStatement.executeUpdate(sql, autoGeneratedKeys));
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        logQuery(sql);
        return timeQuery(() -> wrappedStatement.executeUpdate(sql, columnIndexes));
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        logQuery(sql);
        return timeQuery(() -> wrappedStatement.executeUpdate(sql, columnNames));
    }

    @Override
    public Connection getConnection() throws SQLException {
        return wrappedStatement.getConnection();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return wrappedStatement.getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return new LoggableResultSet(wrappedStatement.getGeneratedKeys(), config, queryNumber);
    }

    @Override
    public ParameterMetaData getParameterMetaData() throws SQLException {
        return wrappedStatement.getParameterMetaData();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return wrappedStatement.getResultSetHoldability();
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return wrappedStatement.getFetchDirection();
    }

    @Override
    public int getFetchSize() throws SQLException {
        return wrappedStatement.getFetchSize();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return wrappedStatement.getMaxFieldSize();
    }

    @Override
    public int getMaxRows() throws SQLException {
        return wrappedStatement.getMaxRows();
    }

    @Override
    public ResultSetMetaData getMetaData() throws SQLException {
        return wrappedStatement.getMetaData();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return wrappedStatement.getMoreResults();
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return wrappedStatement.getQueryTimeout();
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return new LoggableResultSet(wrappedStatement.getResultSet(), config, queryNumber);
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return wrappedStatement.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return wrappedStatement.getResultSetType();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return wrappedStatement.getUpdateCount();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return wrappedStatement.getWarnings();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return wrappedStatement.isClosed();
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return wrappedStatement.isPoolable();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return wrappedStatement.isCloseOnCompletion();
    }

    @Override
    public void setArray(int parameterIndex, Array x) throws SQLException {
        wrappedStatement.setArray(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
        wrappedStatement.setAsciiStream(parameterIndex, x, length);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setBigDecimal(int parameterIndex, java.math.BigDecimal x) throws SQLException {
        wrappedStatement.setBigDecimal(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
        wrappedStatement.setBinaryStream(parameterIndex, x, length);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setBlob(int parameterIndex, Blob x) throws SQLException {
        wrappedStatement.setBlob(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        wrappedStatement.setBoolean(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setByte(int parameterIndex, byte x) throws SQLException {
        wrappedStatement.setByte(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, (int) x);
    }

    @Override
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
        wrappedStatement.setBytes(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
        wrappedStatement.setCharacterStream(parameterIndex, reader, length);
        saveQueryIndexedParam(parameterIndex, reader);
    }

    @Override
    public void setClob(int parameterIndex, Clob x) throws SQLException {
        wrappedStatement.setClob(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setDate(int parameterIndex, Date x) throws SQLException {
        wrappedStatement.setDate(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setDate(int parameterIndex, Date x, java.util.Calendar cal) throws SQLException {
        wrappedStatement.setDate(parameterIndex, x, cal);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setDouble(int parameterIndex, double x) throws SQLException {
        wrappedStatement.setDouble(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setFloat(int parameterIndex, float x) throws SQLException {
        wrappedStatement.setFloat(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setInt(int parameterIndex, int x) throws SQLException {
        wrappedStatement.setInt(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setLong(int parameterIndex, long x) throws SQLException {
        wrappedStatement.setLong(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        wrappedStatement.setNull(parameterIndex, sqlType);
        saveQueryIndexedParam(parameterIndex, null);
    }

    @Override
    public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
        wrappedStatement.setNull(parameterIndex, sqlType, typeName);
        saveQueryIndexedParam(parameterIndex, null);
    }

    @Override
    public void setURL(int parameterIndex, URL x) throws SQLException {
        wrappedStatement.setURL(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setRowId(int parameterIndex, RowId x) throws SQLException {
        wrappedStatement.setRowId(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setNString(int parameterIndex, String value) throws SQLException {
        wrappedStatement.setNString(parameterIndex, value);
        saveQueryIndexedParam(parameterIndex, value);
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
        wrappedStatement.setNCharacterStream(parameterIndex, value, length);
    }

    @Override
    public void setNClob(int parameterIndex, NClob value) throws SQLException {
        wrappedStatement.setNClob(parameterIndex, value);
        saveQueryIndexedParam(parameterIndex, value);
    }

    @Override
    public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
        wrappedStatement.setClob(parameterIndex, reader, length);
        saveQueryIndexedParam(parameterIndex, reader);
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
        wrappedStatement.setBlob(parameterIndex, inputStream, length);
        saveQueryIndexedParam(parameterIndex, inputStream);
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
        wrappedStatement.setNClob(parameterIndex, reader, length);
        saveQueryIndexedParam(parameterIndex, reader);
    }

    @Override
    public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
        wrappedStatement.setSQLXML(parameterIndex, xmlObject);
        saveQueryIndexedParam(parameterIndex, xmlObject);
    }

    @Override
    public void setObject(int parameterIndex, Object x) throws SQLException {
        wrappedStatement.setObject(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
        wrappedStatement.setObject(parameterIndex, x, targetSqlType);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {
        wrappedStatement.setObject(parameterIndex, x, targetSqlType, scale);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
        wrappedStatement.setAsciiStream(parameterIndex, x, length);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
        wrappedStatement.setBinaryStream(parameterIndex, x, length);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
        wrappedStatement.setCharacterStream(parameterIndex, reader, length);
        saveQueryIndexedParam(parameterIndex, reader);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
        wrappedStatement.setAsciiStream(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
        wrappedStatement.setBinaryStream(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
        wrappedStatement.setCharacterStream(parameterIndex, reader);
        saveQueryIndexedParam(parameterIndex, reader);
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
        wrappedStatement.setNCharacterStream(parameterIndex, value);
        saveQueryIndexedParam(parameterIndex, value);
    }

    @Override
    public void setClob(int parameterIndex, Reader reader) throws SQLException {
        wrappedStatement.setClob(parameterIndex, reader);
        saveQueryIndexedParam(parameterIndex, reader);
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
        wrappedStatement.setBlob(parameterIndex, inputStream);
        saveQueryIndexedParam(parameterIndex, inputStream);
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader) throws SQLException {
        wrappedStatement.setNClob(parameterIndex, reader);
        saveQueryIndexedParam(parameterIndex, reader);
    }

    @Override
    public void setRef(int parameterIndex, Ref x) throws SQLException {
        wrappedStatement.setRef(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setShort(int parameterIndex, short x) throws SQLException {
        wrappedStatement.setShort(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setString(int parameterIndex, String x) throws SQLException {
        wrappedStatement.setString(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setTime(int parameterIndex, Time x) throws SQLException {
        wrappedStatement.setTime(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setTime(int parameterIndex, Time x, java.util.Calendar cal) throws SQLException {
        wrappedStatement.setTime(parameterIndex, x, cal);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
        wrappedStatement.setTimestamp(parameterIndex, x);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x, java.util.Calendar cal) throws SQLException {
        wrappedStatement.setTimestamp(parameterIndex, x, cal);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
        wrappedStatement.setUnicodeStream(parameterIndex, x, length);
        saveQueryIndexedParam(parameterIndex, x);
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        wrappedStatement.setCursorName(name);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        wrappedStatement.setEscapeProcessing(enable);
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        wrappedStatement.setFetchDirection(direction);
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        wrappedStatement.setFetchSize(rows);
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        wrappedStatement.setMaxFieldSize(max);
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        wrappedStatement.setMaxRows(max);
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        wrappedStatement.setPoolable(poolable);
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        wrappedStatement.setQueryTimeout(seconds);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return wrappedStatement.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return wrappedStatement.isWrapperFor(iface);
    }
}
